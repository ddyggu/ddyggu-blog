<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
							  http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
							  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
							  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- spring-mvc-3.1.xsd부터 annotation-driven안에 커스텀 messageConverter 적용가능,  
	annotation-driven이 없으면 DefaultAnnotationHandlerMapping, AnnotationMethodHandlerAdapter, ConfigurableWebDataBinderInitializer등을 각각 등록해야 함-->
	<mvc:annotation-driven> 
		<mvc:message-converters register-defaults="true">
			<!-- JSON Return 메시지 컨버터 -->
			<beans:bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
				<beans:property name="supportedMediaTypes" value="text/plain; charset=UTF-8" />
			</beans:bean>
			<!-- FileDownload 메시지 컨버터 -->
			<beans:bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- Handler Intercepter 설정 -->
	<mvc:interceptors>
		<!-- XSS 방어용 lucy-xss filter 객체를 돌려주는 인터셉터 -->
		<mvc:interceptor>	
			<mvc:mapping path="/boardlist"/>
			<mvc:mapping path="/joinConfirm"/>
			<mvc:mapping path="/contents"/>
			<mvc:mapping path="/boardModify"/>
			<mvc:mapping path="/"/>
			<beans:bean class="com.ddyggu.interceptor.XssFilterInterceptor"/>
		</mvc:interceptor>
		<!-- LogIn 체크를 위한 세션체크 인터셉터 -->
		<mvc:interceptor>
			<mvc:mapping path="/boardWrite"/>
			<mvc:mapping path="/boadModify"/>
			<beans:bean class="com.ddyggu.interceptor.LoginCheckInterceptor"/>
		</mvc:interceptor>
		<!-- 글쓴이 체크를 위한 인터셉터 -->
		<mvc:interceptor>
			<mvc:mapping path="/boardModify"/>
			<mvc:mapping path="/boardDelete"/>
			<beans:bean class="com.ddyggu.interceptor.WriterCheckInterceptor"/>
		</mvc:interceptor>
		<!-- 관리자 체크를 위한 인터셉터 -->
		<mvc:interceptor>
			<mvc:mapping path="/admin/boardSupervise"/>
			<beans:bean class="com.ddyggu.interceptor.AdminCheckInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/Resources/**" location="/Resources/" />
	
	
	<!-- Velocity view 설정, view order는 velocity 1, jsp 2 -->
	<beans:bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<beans:property name="resourceLoaderPath" value="/WEB-INF/velocity/" />
		<beans:property name="velocityProperties">
			<beans:props>
				<beans:prop key="input.encoding">UTF-8</beans:prop>
				<beans:prop key="output.encoding">UTF-8</beans:prop>
				<beans:prop key="directive.set.null.allowed">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<beans:property name="cache" value="true"/>
		<beans:property name="suffix" value=".vm"/>
		<beans:property name="order" value="1"/>
		<beans:property name="toolboxConfigLocation" value="/WEB-INF/velocity/conf/toolbox.xml" />
		<beans:property name="contentType"><beans:value>text/html; charset=UTF-8</beans:value></beans:property>
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>	
	
	<!--  mvc:annotation-driven이 있을 경우 필요없음
	<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
		<!-- binding 단계에서 validation하기 위해 ConfigurableWebBindingInitializer를 등록함 -->
		<!--  
		<beans:property name="webBindingInitializer">
			<beans:bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
				<beans:property name="validator" ref="validator"/>
			</beans:bean>
		</beans:property>
		<beans:property name="messageConverters">
			<beans:list>
				<beans:bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	 -->
	
	<!-- JSR-303 validator를 사용하기 위함, mvc:annotation-driven이 있을 경우 필요없음 -->
	<!--  <beans:bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->
	
	<!-- javax mail 설정, 관리자 메일은 ddyggu@gmail.com에서 보냄 -->
	<context:property-placeholder location="mail.properties"/>
	<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"
		p:host="${mail.host}"
		p:port="${mail.port}"
		p:username="${mail.username}"
		p:password="${mail.password}">
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.smtp.auth">${mail.smtp.auth}</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</beans:prop>
				<beans:prop key="mail.smtp.ssl.trust">${mail.smtp.ssl.trust}</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<!-- FileUpload 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="1000000"></beans:property>
	</beans:bean>
	
	<!-- Cumtom Validator 등록, Member 빈 검증, Controller WebDataBindInitializer에 등록하여 사용 -->
	<beans:bean id="memberValidator" class="com.ddyggu.validator.MemberValidator"/>
	
	<!-- Validation 시 사용되는 메시지 등록 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>com/ddyggu/validator/message</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>	
	
	
	<beans:bean id="StringUtility" class="com.ddyggu.util.StringUtilityImpl" />
	
	<!-- SQL Injection 방어용 서블릿 필터, 이 빈은 시험 등록한 것으로 제거해도 무방하지만  
	      web.xml에는 delegatingFilterProxy로 등록되어 있으므로 실제 구현클래스로 다시 등록해야한다.
		  필터를 이렇게 등록해두면 스프링 빈을 주입받아 사용할 수 있다.-->
	<beans:bean id="InjectionFilter" class="com.ddyggu.filter.InjectionFilter"/>
	
	<!--  해당 패키지의 클래스 중 @Component가 적용된 클래스를 bean 등록  -->
	 <context:component-scan base-package="com.ddyggu." />
	
	
	 	 	
</beans:beans>
